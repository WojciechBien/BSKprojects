using System;
using System.CodeDom;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace bsk_zadania
{
    public class projekt_3
    {
        private string publicKeyString;
        private string privateKeyString;
        private List<byte[]> encryptedData;
        private List<byte[]> decryptedData;
        private List<byte[]> blocksToEncrypt;
        /// <summary>
        /// constuctor that initiates  RSACryptoServiceProvider and creates private and public keys.
        /// </summary>
        public projekt_3()
        {
            var cryptoServiceProvider = new RSACryptoServiceProvider(768); //768 - size of the key
            var privateKey = cryptoServiceProvider.ExportParameters(true); //Generating a private key
            var publicKey = cryptoServiceProvider.ExportParameters(false); //Generating a public key
             encryptedData = new List<byte[]>();
             blocksToEncrypt = new List<byte[]>();
             decryptedData = new List<byte[]>();
            publicKeyString = GetKeyString(publicKey);
             privateKeyString = GetKeyString(privateKey);
        }
        /// <summary>
        /// GetKeyString returning a Public and private key as string
        /// </summary>
        /// <param name="publicKey">Public key generated by CryptoServiceProvider</param>
        /// <returns></returns>
        public static string GetKeyString(RSAParameters publicKey)
        {

            var stringWriter = new System.IO.StringWriter();
            var xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(RSAParameters));
            xmlSerializer.Serialize(stringWriter, publicKey);
            return stringWriter.ToString();
        }
        /// <summary>
        /// Encrypt is used to encrypt text file with provided public key
        /// </summary>
        /// <param name="textToEncrypt"> Text that we want to encrpyt, provided from text file</param>
        /// <param name="publicKeyString">Public key that will be used to encrypt text file</param>
        /// <returns></returns>
        public string Encrypt(string textToEncrypt)
        {
           
            var splittedText = File.ReadAllText(textToEncrypt).SplitInParts(10);
            foreach (var block in splittedText)
            {
                blocksToEncrypt.Add(Encoding.ASCII.GetBytes(block));
            }
            using (var rsa = new RSACryptoServiceProvider(768))
            {
                try
                {
                    StringBuilder encrStringBuilder = new StringBuilder();
                    rsa.FromXmlString(publicKeyString.ToString());
                    int i = 0;
                    foreach (var block in blocksToEncrypt)
                    {
                        encryptedData.Add(rsa.Encrypt(block.ToArray(), true));
                            encrStringBuilder.Append(Convert.ToBase64String(encryptedData[i]));
                            i++;
                    }
                    return encrStringBuilder.ToString();
                }
                finally
                {
                    rsa.PersistKeyInCsp = false;
                }
            }
        }
        public byte[] addByteToArray(byte[] bArray, byte newByte)
        {
            byte[] newArray = new byte[bArray.Length + 1];
            bArray.CopyTo(newArray, 1);
            newArray[0] = newByte;
            return newArray;
        }
        /// <summary>
        /// Splits an array into several smaller arrays.
        /// </summary>
        /// <typeparam name="T">The type of the array.</typeparam>
        /// <param name="array">The array to split.</param>
        /// <param name="size">The size of the smaller arrays.</param>
        /// <returns>An array containing smaller arrays.</returns>

        /// <summary>
        /// Decrypt is used to decrypt text file with provided private key
        /// </summary>
        /// <param name="textToDecrypt">encrypted text file that we want to decrypt with provided private key</param>
        /// <param name="privateKeyString"> Private key that we are using to decrypt the file</param>
        /// <returns></returns>
        public string Decrypt()
        {
            using (var rsa = new RSACryptoServiceProvider(768))
            {
                try
                {

                    // server decrypting data with private key                    
                    rsa.FromXmlString(privateKeyString);

                    foreach (var block in encryptedData)
                    {
                        decryptedData.Add(rsa.Decrypt(block, true));
                    }
                    var decryptedBytes = decryptedData
                        .SelectMany(a => a)
                        .ToArray();
                    var decryptedDataString = Encoding.UTF8.GetString(decryptedBytes);
                    return decryptedDataString;
                }
                finally
                {
                    rsa.PersistKeyInCsp = false;
                }
            }
        }

        private static string GenerateTestString()
        {
            Guid opportinityId = Guid.NewGuid();
            Guid systemUserId = Guid.NewGuid();
            string currentTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("opportunityid={0}", opportinityId.ToString());
            sb.AppendFormat("&systemuserid={0}", systemUserId.ToString());
            sb.AppendFormat("&currenttime={0}", currentTime);

            return sb.ToString();
        }
        private byte[] readBytes(string directory)
        {
            byte[] originalBytes;
            using (FileStream fs = new FileStream(directory, FileMode.Open))
            {
                originalBytes = new byte[fs.Length];
                fs.Read(originalBytes, 0, originalBytes.Length);
            }
            return originalBytes;
        }
    }

    public static class arraySplitter
    {
        public static IEnumerable<IEnumerable<T>> Split<T>(this T[] array, int size)
        {
            for (var i = 0; i < (float)array.Length / size; i++)
            {
                yield return array.Skip(i * size).Take(size);
            }
        }
    }
    static class StringExtensions
    {

        public static IEnumerable<String> SplitInParts(this String s, Int32 partLength)
        {
            if (s == null)
                throw new ArgumentNullException(nameof(s));
            if (partLength <= 0)
                throw new ArgumentException("Part length has to be positive.", nameof(partLength));

            for (var i = 0; i < s.Length; i += partLength)
                yield return s.Substring(i, Math.Min(partLength, s.Length - i));
        }

    }
}
